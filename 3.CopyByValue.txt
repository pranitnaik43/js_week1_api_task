Task -> How to copy by value a composite datatype (array+objects)?

Soln->
There are 3 ways to copy by value a reference type variable;
1. using Spread operator
2. using Object.assign()
3. using JSON.stringify() and JSON.parse() methods

The first 2 ways are used for shallow copy and the 3rd way is used for deep copy.

Deep copy:
It means that all properties of the object are copied by value even if some of the properties are of reference data type

Shallow copy:
It means that the properties of the object having primitive data tpe are copied by value and the properties of the object having reference data type are copied by reference.


Eg:
let student = {
    name: 'Rey',
    age: 23,
    marks: {
        physics: 90,
        chemistry: 85,
        mathematics: 95
    }
};

// using spread operator ...
let copiedStudent1 = {
    ...student
};
copiedStudent1.name = 'Ray1'; 
copiedStudent1.marks.physics = 91;

console.log(student);
console.log(copiedStudent1);

Output:
{ name: 'Ray',
  age: 23,
  marks: { physics: 91, chemistry: 85, mathematics: 95 } 
}
{ name: 'Ray1',
  age: 23,
  marks: { physics: 91, chemistry: 85, mathematics: 95 } 
}

// using Object.assign()
let copiedStudent2 = Object.assign({}, student);
copiedStudent2.name = 'Ray2'; 
copiedStudent2.marks.physics = 92;
console.log(student);
console.log(copiedStudent2);

Output:
{ name: 'Ray',
  age: 23,
  marks: { physics: 92, chemistry: 85, mathematics: 95 } 
}
{ name: 'Ray2',
  age: 23,
  marks: { physics: 92, chemistry: 85, mathematics: 95 } 
}

// using JSON.stringify() and JSON.parse() methods
let copiedStudent3 = JSON.parse(JSON.stringify(student))
copiedStudent3.name = 'Ray3'; 
copiedStudent3.marks.physics = 93;
console.log(student);
console.log(copiedStudent3);

Output:
{ name: 'Ray',
  age: 23,
  marks: { physics: 90, chemistry: 85, mathematics: 95 } 
}
{ name: 'Ray3',
  age: 23,
  marks: { physics: 93, chemistry: 85, mathematics: 95 } 
}